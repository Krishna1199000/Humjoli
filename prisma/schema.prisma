// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// One-time password (OTP) for email login/verification
model Otp {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  purpose   OtpPurpose @default(LOGIN)
  tempData  Json?

  @@index([email, createdAt])
}

enum OtpPurpose {
  LOGIN
  SIGNUP
  RESET
}

model Employee {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  mobile         String
  address1       String?
  address2       String?
  city           String?
  pin            String?
  tel            String?
  email          String?
  contact        String?
  panAadhar      String?
  salary         Float    @default(0)
  isActive       Boolean  @default(true)
  attendanceData String?  @db.Text // JSON field for attendance records
  salaryData     String?  @db.Text // JSON field for salary records
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  salaries     Salary[]
  attendances  Attendance[]
}

model Inventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  quantity    Int      @default(0)
  price       Float    @default(0)
  imageUrl    String?
  minStock    Int      @default(0)
  maxStock    Int?
  location    String?
  supplier    String?
  status      InventoryStatus @default(IN_STOCK)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favorites   Favorite[]
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

// Inventory Categories (managed list for UI; Inventory.category stores the name)
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Favorite {
  id          String   @id @default(cuid())
  userId      String
  inventoryId String
  createdAt   DateTime @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([userId, inventoryId])
}

// Salary Management
model Salary {
  id          String   @id @default(cuid())
  employeeId  String
  basicSalary Float
  allowances  Float    @default(0)
  deductions  Float    @default(0)
  netSalary   Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

// Attendance Tracking
model Attendance {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  status      AttendanceStatus
  checkInTime DateTime?
  checkOutTime DateTime?
  totalHours  Float?
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
  HALF_DAY
}

// Customer Master
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String
  address   String?
  gstNumber String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Invoice Management
model Invoice {
  id            String   @id @default(cuid())
  quotationNo   String   @unique
  customerName  String
  customerAddress String
  customerTel   String
  customerState String
  customerStateCode String
  customerGSTIN String?
  refName       String?
  bookingDate   DateTime
  eventDate     DateTime
  startTime     String
  endTime       String
  manager       String?
  advanceAmount Float    @default(0)
  balanceAmount Float    @default(0)
  remarks       String?
  totalAmount   Float    @default(0)
  cgstAmount    Float    @default(0)
  sgstAmount    Float    @default(0)
  taxableAmount Float    @default(0)
  sacCode       String   @default("00440035")
  invoiceValueInWords String
  customerSignature String? // Base64 encoded signature image
  status        InvoiceStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  items InvoiceItem[]
  deliveries DeliveryEntry[]
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  srl       Int
  particular String
  quantity  Int
  rent      Float
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Delivery planning entries (per event/invoice)
model DeliveryEntry {
  id         String   @id @default(cuid())
  invoiceId  String
  eventDate  DateTime
  eventTime  String?
  area       String?
  vendor     String?
  remark     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([eventDate])
  @@index([invoiceId])
}

enum InvoiceStatus {
  DRAFT
  PENDING
  SENT
  SEMI_PAID
  PAID
  OVERDUE
  CANCELLED
}

// Invoice Counter for auto-incrementing quotation numbers
model InvoiceCounter {
  id    String @id @default(cuid())
  currentNumber Int @default(1)
  updatedAt DateTime @updatedAt
}

// Vendor Management
model Vendor {
  id            String   @id @default(cuid())
  businessName  String
  contactName   String?
  phone         String?
  email         String?
  gstin         String?
  address       String?
  notes         String?
  tags          String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  purchases     Purchase[]
  payments      VendorPayment[]
  
  @@index([businessName])
}

model Purchase {
  id           String   @id @default(cuid())
  vendorId     String
  amount       Int      // Amount in paise (to avoid float issues)
  date         DateTime
  reference    String?
  description  String?
  createdBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  @@index([vendorId, date])
}

model VendorPayment {
  id            String   @id @default(cuid())
  vendorId      String
  amount        Int      // Amount in paise
  date          DateTime
  paymentMethod String?
  reference     String?
  notes         String?
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  @@index([vendorId, date])
}

// Enhanced Customer Management
model EnhancedCustomer {
  id                  String   @id @default(cuid())
  displayName         String
  fullLegalName       String?
  email               String?
  phone               String
  billingAddress      String?
  shippingAddress     String?
  gstin               String?
  defaultPaymentTerms String?
  preferredContact    String?  // EMAIL, PHONE, SMS
  notes               String?
  tags                String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  invoices            EnhancedInvoice[]
  
  @@index([email])
  @@index([displayName])
}

// Account Entries (Ledger)
model AccountEntry {
  id           String      @id @default(cuid())
  type         EntryType   // CREDIT or DEBIT
  amount       Int         // Amount in paise
  currency     String      @default("INR")
  reason       String
  counterParty String?
  date         DateTime    @default(now())
  createdBy    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@index([date])
  @@index([type])
  @@index([counterParty])
}

enum EntryType {
  CREDIT
  DEBIT
}

// Enhanced Employee Management
model EnhancedEmployee {
  id           String   @id @default(cuid())
  name         String
  email        String?  @unique
  phone        String?
  role         String?
  designation  String?
  joiningDate  DateTime
  monthlySalary Int     // Amount in paise
  bankDetails  String?
  notes        String?
  avatar       String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  attendances  EmployeeAttendance[]
  salaryPayments SalaryPayment[]
  createdInvoices EnhancedInvoice[]
  
  @@index([email])
  @@index([isActive])
}

model EmployeeAttendance {
  id         String            @id @default(cuid())
  employeeId String
  date       DateTime
  status     AttendanceStatus  @default(PRESENT)
  checkIn    DateTime?
  checkOut   DateTime?
  notes      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
  employee EnhancedEmployee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([employeeId, date])
  @@index([employeeId, date])
}

model SalaryPayment {
  id         String   @id @default(cuid())
  employeeId String
  amount     Int      // Amount in paise
  month      String   // Format: YYYY-MM
  paidDate   DateTime
  reference  String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  employee EnhancedEmployee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([employeeId, month])
  @@index([employeeId, month])
}

// Enhanced Invoice Management
model EnhancedInvoice {
  id           String        @id @default(cuid())
  invoiceNo    String        @unique
  customerId   String
  employeeId   String?       // Created by employee
  status       InvoiceStatus @default(DRAFT)
  issueDate    DateTime      @default(now())
  dueDate      DateTime?
  subtotal     Int           // Amount in paise
  taxAmount    Int           @default(0)
  discountAmount Int         @default(0)
  total        Int           // Amount in paise
  paidAmount   Int           @default(0)  // Amount paid so far in paise
  taxBreakdown String?       // JSON string
  notes        String?
  terms        String?
  customerSignature String?  // Base64 encoded signature image
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  customer     EnhancedCustomer @relation(fields: [customerId], references: [id])
  createdBy    EnhancedEmployee? @relation(fields: [employeeId], references: [id])
  items        EnhancedInvoiceItem[]
  
  @@index([issueDate])
  @@index([customerId])
  @@index([status])
}

model EnhancedInvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  name        String
  description String?
  quantity    Int
  rate        Int      // Rate in paise
  discount    Int      @default(0) // Discount in paise
  taxRate     Float    @default(0) // Tax percentage
  amount      Int      // Total amount in paise
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  invoice EnhancedInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
}
