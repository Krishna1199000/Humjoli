// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  mobile         String
  address1       String?
  address2       String?
  city           String?
  pin            String?
  tel            String?
  email          String?
  contact        String?
  panAadhar      String?
  salary         Float    @default(0)
  isActive       Boolean  @default(true)
  attendanceData String?  @db.Text // JSON field for attendance records
  salaryData     String?  @db.Text // JSON field for salary records
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  salaries     Salary[]
  attendances  Attendance[]
}

model Inventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  quantity    Int      @default(0)
  price       Float    @default(0)
  imageUrl    String?
  minStock    Int      @default(0)
  maxStock    Int?
  location    String?
  supplier    String?
  status      InventoryStatus @default(IN_STOCK)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favorites   Favorite[]
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

model Favorite {
  id          String   @id @default(cuid())
  userId      String
  inventoryId String
  createdAt   DateTime @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([userId, inventoryId])
}

// Salary Management
model Salary {
  id          String   @id @default(cuid())
  employeeId  String
  basicSalary Float
  allowances  Float    @default(0)
  deductions  Float    @default(0)
  netSalary   Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

// Attendance Tracking
model Attendance {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  status      AttendanceStatus
  checkInTime DateTime?
  checkOutTime DateTime?
  totalHours  Float?
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
  HALF_DAY
}

// Customer Master
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String
  address   String?
  gstNumber String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
